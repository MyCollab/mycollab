<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycollab.module.project.dao.ProjectTicketMapper">
    <resultMap id="BaseResultMap" type="com.mycollab.module.project.domain.ProjectTicket">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="description" jdbcType="LONGVARCHAR" property="description" />
        <result column="assignUser" jdbcType="VARCHAR" property="assignUser" />
        <result column="assignUserFullName" jdbcType="VARCHAR" property="assignUserFullName" />
        <result column="assignUserAvatarId" jdbcType="VARCHAR" property="assignUserAvatarId" />
        <result column="createdUser" jdbcType="VARCHAR" property="createdUser" />
        <result column="createdUserFullName" jdbcType="VARCHAR" property="createdUserFullName" />
        <result column="createdUserAvatarId" jdbcType="VARCHAR" property="createdUserAvatarId" />
        <result column="dueDate" jdbcType="TIMESTAMP" property="dueDate" />
        <result column="projectId" jdbcType="INTEGER" property="projectId" />
        <result column="projectName" jdbcType="VARCHAR" property="projectName" />
        <result column="projectShortName" jdbcType="VARCHAR" property="projectShortName" />
        <result column="type" jdbcType="VARCHAR" property="type" />
        <result column="typeId" jdbcType="INTEGER" property="typeId" />
        <result column="extraTypeId" jdbcType="INTEGER" property="extraTypeId" />
        <result column="status" jdbcType="VARCHAR" property="status" />
        <result column="createdTime" jdbcType="TIMESTAMP" property="createdTime" />
        <result column="lastUpdatedTime" jdbcType="TIMESTAMP" property="lastUpdatedTime" />
        <result column="numComments" jdbcType="INTEGER" property="numComments" />
        <result column="numFollowers" jdbcType="INTEGER" property="numFollowers" />
        <result column="priority" jdbcType="VARCHAR" property="priority" />
        <result column="sAccountId" jdbcType="INTEGER" property="saccountid" />
        <result column="billableHours" property="billableHours" jdbcType="DOUBLE"/>
        <result column="nonBillableHours" property="nonBillableHours" jdbcType="DOUBLE"/>
        <result column="startDate" jdbcType="TIMESTAMP" property="startDate" />
        <result column="endDate" jdbcType="TIMESTAMP" property="endDate" />
        <result column="milestoneId" jdbcType="INTEGER" property="milestoneId" />
        <result column="milestoneName" jdbcType="VARCHAR" property="milestoneName" />
    </resultMap>

    <sql id="queryRiskSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} mainTbl.name LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} mainTbl.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} mainTbl.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} mainTbl.assignUser = @{searchCriteria.assignUser.value}
        #end
        
        #ifnotnull($searchCriteria.open)
            ${searchCriteria.open.operation} mainTbl.status NOT IN ('Closed')
        #end

        #ifnotnull($searchCriteria.unAssignee)
            ${searchCriteria.unAssignee.operation} (mainTbl.assignUser IS NULL OR
            (SELECT COUNT(*) FROM m_prj_member AS tmpMember WHERE mainTbl.assignUser=tmpMember.username AND tmpMember.status='Active') = 0)
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((mainTbl.dueDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
              OR (mainTbl.startDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
              OR (mainTbl.endDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            )
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} mainTbl.milestoneId = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Risk" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} mainTbl.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end
        
        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} mainTbl.dueDate ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end

        #selectExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="queryBugSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} mainTbl.name LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} mainTbl.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} mainTbl.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} mainTbl.assignUser = @{searchCriteria.assignUser.value}
        #end
        
        #ifnotnull($searchCriteria.open)
            ${searchCriteria.open.operation} mainTbl.status NOT IN ('Verified')
        #end

        #ifnotnull($searchCriteria.unAssignee)
            ${searchCriteria.unAssignee.operation} (mainTbl.assignUser IS NULL OR
            (SELECT COUNT(*) FROM m_prj_member AS tmpMember WHERE mainTbl.assignUser=tmpMember.username AND tmpMember.status='Active') = 0)
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((mainTbl.dueDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (mainTbl.startDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (mainTbl.endDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to}))
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} mainTbl.milestoneId = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Bug" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} mainTbl.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end
        
         #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} mainTbl.dueDate ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end

        #selectExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="queryTaskSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)
        
        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} mainTbl.name LIKE '%${searchCriteria.name.value}%'
        #end
        
        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} mainTbl.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end
        
        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} mainTbl.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end
        
        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} mainTbl.assignUser = @{searchCriteria.assignUser.value}
        #end
        
        #ifnotnull($searchCriteria.open)
            ${searchCriteria.open.operation} mainTbl.status NOT IN ('Closed')
        #end

        #ifnotnull($searchCriteria.unAssignee)
            ${searchCriteria.unAssignee.operation} (mainTbl.assignUser IS NULL OR
            (SELECT COUNT(*) FROM m_prj_member AS tmpMember WHERE mainTbl.assignUser=tmpMember.username AND tmpMember.status='Active') = 0)
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((mainTbl.dueDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (mainTbl.startDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (mainTbl.endDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to}))
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} mainTbl.milestoneId = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Task" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} mainTbl.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end
        
        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} mainTbl.dueDate ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end

        #selectExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="queryMilestoneSearchCriteria">
        <![CDATA[
        #set($searchCriteria = $_parameter.searchCriteria)

        #ifnotnull($searchCriteria.name)
            ${searchCriteria.name.operation} mainTbl.name LIKE '%${searchCriteria.name.value}%'
        #end

        #ifnotnull($searchCriteria.saccountid)
            ${searchCriteria.saccountid.operation} mainTbl.sAccountId = @{searchCriteria.saccountid.value,jdbcType=NUMERIC}
        #end

        #ifnotnull($searchCriteria.projectIds)
            ${searchCriteria.projectIds.operation} mainTbl.projectId IN
            #repeat(${searchCriteria.projectIds.values} $projectId "," "(" ")")
                @{projectId}
            #end
        #end

        #ifnotnull($searchCriteria.assignUser)
            ${searchCriteria.assignUser.operation} mainTbl.assignUser = @{searchCriteria.assignUser.value}
        #end

        #ifnotnull($searchCriteria.open)
            ${searchCriteria.open.operation} mainTbl.status NOT IN ('Closed')
        #end

        #ifnotnull($searchCriteria.unAssignee)
            ${searchCriteria.unAssignee.operation} (mainTbl.assignUser IS NULL OR
            (SELECT COUNT(*) FROM m_prj_member AS tmpMember WHERE mainTbl.assignUser=tmpMember.username AND tmpMember.status='Active') = 0)
        #end

        #ifnotnull($searchCriteria.dateInRange)
            ${searchCriteria.dateInRange.operation} ((mainTbl.dueDate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (mainTbl.startdate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to})
            OR (mainTbl.enddate BETWEEN @{searchCriteria.dateInRange.from} AND @{searchCriteria.dateInRange.to}))
        #end

        #ifnotnull($searchCriteria.milestoneId)
            ${searchCriteria.milestoneId.operation} mainTbl.id = @{searchCriteria.milestoneId.value}
        #end

        #ifnotnull($searchCriteria.types)
            ${searchCriteria.types.operation} "Project-Milestone" IN
            #repeat(${searchCriteria.types.values} $type "," "(" ")")
                @{type}
            #end
        #end

        #ifnotnull($searchCriteria.typeIds)
            ${searchCriteria.typeIds.operation} mainTbl.id IN
            #repeat(${searchCriteria.typeIds.values} $typeId "," "(" ")")
                @{typeId}
            #end
        #end

        #ifnotnull($searchCriteria.dueDate)
            ${searchCriteria.dueDate.operation} mainTbl.enddate ${searchCriteria.dueDate.comparison} @{searchCriteria.dueDate.value}
        #end

        #selectExpr($searchCriteria.extraFields)
        ]]>
    </sql>

    <sql id="selectGenericTaskFromRisk">
    <![CDATA[
          SELECT mainTbl.name, mainTbl.description, mainTbl.assignUser,
            concat(assignUserTbl.firstname, ' ', assignUserTbl.lastname) AS assignUserFullName,
            assignUserTbl.avatarId as assignUserAvatarId,
            createdUserTbl.username AS createdUser, createdUserTbl.avatarId as createdUserAvatarId,
            concat(createdUserTbl.firstname, ' ', createdUserTbl.lastname) AS createdUserFullName,
            mainTbl.dueDate, mainTbl.projectId, m_prj_project.name AS projectName,
            m_prj_project.shortname AS projectShortName, NULL AS extraTypeId, mainTbl.status,
            'Project-Risk' AS type, mainTbl.id AS typeId, mainTbl.createdTime, mainTbl.lastUpdatedTime,
            (SELECT count(*)
                    FROM m_comment
                    WHERE m_comment.type='Project-Risk' AND m_comment.typeId=mainTbl.id) AS numComments,
            (SELECT COUNT(*) FROM m_monitor_item WHERE m_monitor_item.typeId = mainTbl.id AND m_monitor_item.type = 'Project-Risk') AS numFollowers,
            (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = mainTbl.projectId
                     AND m_prj_time_logging.type='Project-Risk' AND m_prj_time_logging.typeId=mainTbl.id AND m_prj_time_logging.isBillable = 1) AS billableHours,
            (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = mainTbl.projectId
                     AND m_prj_time_logging.type='Project-Risk' AND m_prj_time_logging.typeId=mainTbl.id AND m_prj_time_logging.isBillable = 0) AS nonBillableHours,
            mainTbl.priority, mainTbl.sAccountId, mainTbl.startDate, mainTbl.endDate, mainTbl.milestoneId,
            mainTbl.originalEstimate, mainTbl.remainEstimate,
            m_prj_milestone.name AS milestoneName
          FROM m_prj_risk AS mainTbl
              INNER JOIN m_prj_project ON (mainTbl.projectId=m_prj_project.id)
              LEFT OUTER JOIN s_user assignUserTbl ON (mainTbl.assignUser=assignUserTbl.username)
              LEFT OUTER JOIN s_user createdUserTbl ON (mainTbl.createdUser=createdUserTbl.username)
              LEFT OUTER JOIN m_prj_milestone ON (mainTbl.milestoneId=m_prj_milestone.id)
        ]]>
    </sql>

    <sql id="selectGenericTaskFromMilestone">
        <![CDATA[
          SELECT mainTbl.name, mainTbl.description, mainTbl.assignUser,
            concat(assignUserTbl.firstname, ' ', assignUserTbl.lastname) AS assignUserFullName,
            assignUserTbl.avatarId as assignUserAvatarId,
            createdUserTbl.username AS createdUser, createdUserTbl.avatarId as createdUserAvatarId,
            concat(createdUserTbl.firstname, ' ', createdUserTbl.lastname) AS createdUserFullName,
            mainTbl.endDate AS dueDate, mainTbl.projectId, m_prj_project.name AS projectName,
            m_prj_project.shortname AS projectShortName, NULL AS extraTypeId, mainTbl.status,
            'Project-Milestone' AS type, mainTbl.id AS typeId, mainTbl.createdTime, mainTbl.lastUpdatedTime,
            (SELECT count(*)
                    FROM m_comment
                    WHERE m_comment.type='Project-Milestone' AND m_comment.typeId=mainTbl.id) AS numComments,
            0 AS numFollowers, 0 AS billableHours, 0 AS nonBillableHours, '' AS priority,
            mainTbl.sAccountId, mainTbl.startDate, mainTbl.endDate,
            mainTbl.id AS milestoneId, 0 AS originalEstimate, 0 AS remainEstimate,
            mainTbl.name AS milestoneName
          FROM m_prj_milestone AS mainTbl
            INNER JOIN m_prj_project ON (mainTbl.projectId=m_prj_project.id)
            LEFT OUTER JOIN s_user assignUserTbl ON (mainTbl.assignUser=assignUserTbl.username)
            LEFT OUTER JOIN s_user createdUserTbl ON (mainTbl.createdUser=createdUserTbl.username)
        ]]>
    </sql>

    <sql id="selectGenericTaskFromBug">
    <![CDATA[
          SELECT mainTbl.name, mainTbl.description, mainTbl.assignUser,
                concat(assignUserTbl.firstname, ' ', assignUserTbl.lastname) AS assignUserFullName,
                assignUserTbl.avatarId as assignUserAvatarId,
                createdUserTbl.username AS createdUser, createdUserTbl.avatarId as createdUserAvatarId,
                concat(createdUserTbl.firstname, ' ', createdUserTbl.lastname) AS createdUserFullName,
                mainTbl.dueDate, mainTbl.projectId, m_prj_project.name AS projectName,
                m_prj_project.shortname AS projectShortName, mainTbl.bugkey AS extraTypeId, mainTbl.status,
                'Project-Bug' AS type, mainTbl.id AS typeId, mainTbl.createdTime, mainTbl.lastUpdatedTime,
                (SELECT count(*)
                    FROM m_comment
                    WHERE m_comment.type='Project-Bug' AND m_comment.typeId=mainTbl.id) AS numComments,
            (SELECT COUNT(*) FROM m_monitor_item WHERE m_monitor_item.typeId = mainTbl.id AND m_monitor_item.type = 'Project-Bug') AS numFollowers,
            (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = mainTbl.projectId
                     AND m_prj_time_logging.type='Project-Bug' AND m_prj_time_logging.typeId=mainTbl.id AND m_prj_time_logging.isBillable = 1) AS billableHours,
            (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = mainTbl.projectId
                     AND m_prj_time_logging.type='Project-Bug' AND m_prj_time_logging.typeId=mainTbl.id AND m_prj_time_logging.isBillable = 0) AS nonBillableHours,
                mainTbl.priority, mainTbl.sAccountId, mainTbl.startDate, mainTbl.endDate,
                mainTbl.milestoneId, mainTbl.originalEstimate, mainTbl.remainEstimate,
                m_prj_milestone.name AS milestoneName
          FROM m_tracker_bug AS mainTbl
              INNER JOIN m_prj_project ON (mainTbl.projectId=m_prj_project.id)
              LEFT OUTER JOIN s_user AS assignUserTbl ON (mainTbl.assignUser=assignUserTbl.username)
              LEFT OUTER JOIN s_user createdUserTbl ON (mainTbl.createdUser=createdUserTbl.username)
              LEFT OUTER JOIN m_prj_milestone ON (mainTbl.milestoneId=m_prj_milestone.id)
        ]]>
    </sql>

    <sql id="selectGenericTaskFromTask">
    <![CDATA[
          SELECT mainTbl.name,  mainTbl.description, mainTbl.assignUser,
            concat(assignUserTbl.firstname, ' ', assignUserTbl.lastname) AS assignUserFullName,
            assignUserTbl.avatarId as assignUserAvatarId,
            createdUserTbl.username AS createdUser, createdUserTbl.avatarId as createdUserAvatarId,
            concat(createdUserTbl.firstname, ' ', createdUserTbl.lastname) AS createdUserFullName,
            mainTbl.dueDate, mainTbl.projectId, m_prj_project.name AS projectName,
            m_prj_project.shortname AS projectShortName, mainTbl.taskkey AS extraTypeId, mainTbl.status,
            'Project-Task' AS type, mainTbl.id AS typeId, mainTbl.createdTime, mainTbl.lastUpdatedTime,
            (SELECT count(*)
                    FROM m_comment
                    WHERE m_comment.type='Project-Task' AND m_comment.typeId=mainTbl.id) AS numComments,
            (SELECT COUNT(*) FROM m_monitor_item WHERE m_monitor_item.typeId = mainTbl.id AND m_monitor_item.type = 'Project-Task') AS numFollowers,
            (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = mainTbl.projectId
                     AND m_prj_time_logging.type='Project-Task' AND m_prj_time_logging.typeId=mainTbl.id AND m_prj_time_logging.isBillable = 1) AS billableHours,
            (SELECT COALESCE(SUM(m_prj_time_logging.logValue), 0) FROM m_prj_time_logging WHERE m_prj_time_logging.projectId = mainTbl.projectId
                     AND m_prj_time_logging.type='Project-Task' AND m_prj_time_logging.typeId=mainTbl.id AND m_prj_time_logging.isBillable = 0) AS nonBillableHours,
            mainTbl.priority, mainTbl.sAccountId, mainTbl.startDate, mainTbl.endDate, mainTbl.milestoneId,
            mainTbl.originalEstimate, mainTbl.remainEstimate,
            m_prj_milestone.name AS milestoneName
          FROM m_prj_task AS mainTbl
            INNER JOIN m_prj_project ON (mainTbl.projectId=m_prj_project.id)
            LEFT OUTER JOIN s_user assignUserTbl ON (mainTbl.assignUser=assignUserTbl.username)
            LEFT OUTER JOIN s_user createdUserTbl ON (mainTbl.createdUser=createdUserTbl.username)
            LEFT OUTER JOIN m_prj_milestone ON (mainTbl.milestoneId=m_prj_milestone.id)
        ]]>
    </sql>

    <select id="getTotalCountFromRisk" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria"
        resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_risk AS mainTbl
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryRiskSearchCriteria" />
            #end
        #end
    </select>

    <select id="getTotalCountFromBug" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria"
        resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_tracker_bug AS mainTbl
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryBugSearchCriteria" />
            #end
        #end
    </select>

    <select id="getTotalCountFromTask" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria"
        resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_task AS mainTbl
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryTaskSearchCriteria" />
            #end
        #end
    </select>

    <select id="getTotalCountFromMilestone" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria"
            resultType="int" lang="velocity">
        SELECT count(*) as totalCount FROM m_prj_milestone AS mainTbl
        #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
                <include refid="queryMilestoneSearchCriteria" />
            #end
        #end
    </select>

    <sql id="orderStatement">
        ORDER BY
          #ifnotnull($_parameter.searchCriteria.orderFields)
            #repeat(${_parameter.searchCriteria.orderFields} $orderField "" "" "")
              ${orderField.field} ${orderField.direction},
            #end
          #end
        lastUpdatedTime DESC
    </sql>

    <select id="findTicketsByCriteria" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria" resultMap="BaseResultMap" lang="velocity">
        (
        <include refid="selectGenericTaskFromTask" />
        #ifnotnull($_parameter.searchCriteria)
          #trimext("WHERE" "AND|OR")
            <include refid="queryTaskSearchCriteria" />
          #end
        #end
        )
        UNION
        (
        <include refid="selectGenericTaskFromRisk" />
        #ifnotnull($_parameter.searchCriteria)
          #trimext("WHERE" "AND|OR")
            <include refid="queryRiskSearchCriteria" />
          #end
        #end
        )

        UNION
        (
        <include refid="selectGenericTaskFromBug" />
        #ifnotnull($_parameter.searchCriteria)
          #trimext("WHERE" "AND|OR")
            <include refid="queryBugSearchCriteria" />
          #end
        #end
        )

        #ifnotnull($_parameter.searchCriteria)
          <include refid="orderStatement" />
        #end
    </select>

    <select id="findPageableListByCriteria" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria" resultMap="BaseResultMap" lang="velocity">
        (
        <include refid="selectGenericTaskFromRisk" />
        #ifnotnull($_parameter.searchCriteria)
          #trimext("WHERE" "AND|OR")
            <include refid="queryRiskSearchCriteria" />
          #end
        #end
        )

        UNION

        (
        <include refid="selectGenericTaskFromBug" />
        #ifnotnull($_parameter.searchCriteria)
          #trimext("WHERE" "AND|OR")
            <include refid="queryBugSearchCriteria" />
          #end
        #end
        )

        UNION
        (
        <include refid="selectGenericTaskFromTask" />
        #ifnotnull($_parameter.searchCriteria)
          #trimext("WHERE" "AND|OR")
            <include refid="queryTaskSearchCriteria" />
          #end
          AND mainTbl.parentTaskId IS NULL
        #end
        )
        UNION
        (
        <include refid="selectGenericTaskFromMilestone" />
        #ifnotnull($_parameter.searchCriteria)
          #trimext("WHERE" "AND|OR")
            <include refid="queryMilestoneSearchCriteria" />
          #end
        #end
        )
        #ifnotnull($_parameter.searchCriteria)
            <include refid="orderStatement" />
        #end
    </select>

    <select id="getAccountsHasOverdueAssignments" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria"
            resultMap="com.mycollab.module.user.dao.BillingAccountMapper.BaseResultMap" lang="velocity">
        SELECT s_account.id, s_account.subDomain
        FROM s_account
        WHERE
          EXISTS (
            SELECT * FROM m_tracker_bug AS mainTbl
              #trimext("WHERE" "AND|OR")
                <include refid="queryBugSearchCriteria" />
              #end
              AND mainTbl.sAccountId = s_account.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_task AS mainTbl
              #trimext("WHERE" "AND|OR")
                <include refid="queryTaskSearchCriteria" />
              #end
              AND mainTbl.sAccountId = s_account.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_milestone AS mainTbl
              #trimext("WHERE" "AND|OR")
                <include refid="queryMilestoneSearchCriteria" />
              #end
              AND mainTbl.sAccountId = s_account.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_risk AS mainTbl
              #trimext("WHERE" "AND|OR")
                <include refid="queryRiskSearchCriteria" />
              #end
              AND mainTbl.sAccountId = s_account.id
          )
        ORDER BY s_account.id ASC
    </select>

    <select id="getProjectsHasOverdueAssignments" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria" resultType="Integer" lang="velocity">
        SELECT m_prj_project.id
        FROM m_prj_project
        WHERE
          EXISTS (
            SELECT * FROM m_tracker_bug AS mainTbl
            #trimext("WHERE" "AND|OR")
              <include refid="queryBugSearchCriteria" />
            #end
            AND mainTbl.projectId = m_prj_project.id) OR
          EXISTS (
            SELECT * FROM m_prj_task AS mainTbl
            #trimext("WHERE" "AND|OR")
              <include refid="queryTaskSearchCriteria" />
            #end
            AND mainTbl.projectId = m_prj_project.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_milestone AS mainTbl
              #trimext("WHERE" "AND|OR")
                <include refid="queryMilestoneSearchCriteria" />
              #end
              AND mainTbl.projectId = m_prj_project.id
          ) OR
          EXISTS (
            SELECT * FROM m_prj_risk AS mainTbl
              #trimext("WHERE" "AND|OR")
                <include refid="queryRiskSearchCriteria" />
              #end
              AND mainTbl.projectId = m_prj_project.id
          )
    </select>

    <select id="getAssigneeSummary" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria"
            resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        SELECT tmpTbl.assignUser AS groupid, COUNT(tmpTbl.assignUser) AS value, tmpTbl.fullname AS groupname,
        tmpTbl.avatarId AS extraValue
          FROM
          ((SELECT mainTbl.assignUser, mainTbl.id AS typeId, 'Project-Task' AS type,
              concat(s_user.firstname, ' ', s_user.lastname) as fullname,
              s_user.avatarId AS avatarId
          FROM m_prj_task AS mainTbl
            INNER JOIN m_prj_member ON (mainTbl.assignUser=m_prj_member.username AND m_prj_member.status='Active')
            LEFT OUTER JOIN s_user ON (m_prj_member.username=s_user.username)
          #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
              <include refid="queryTaskSearchCriteria"/>
            #end
          #end)
          UNION
          (SELECT mainTbl.assignUser, mainTbl.id AS typeId, 'Project-Bug' AS type,
              concat(s_user.firstname, ' ', s_user.lastname) as fullname,
              s_user.avatarId AS avatarId
          FROM m_tracker_bug AS mainTbl
            INNER JOIN m_prj_member ON (mainTbl.assignUser=m_prj_member.username AND m_prj_member.status='Active')
            LEFT OUTER JOIN s_user ON (m_prj_member.username=s_user.username)
          #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
              <include refid="queryBugSearchCriteria"/>
            #end
          #end)
          UNION
          (SELECT mainTbl.assignUser, mainTbl.id AS typeId, 'Project-Risk' AS type,
              concat(s_user.firstname, ' ', s_user.lastname) as fullname,
              s_user.avatarId AS avatarId
          FROM m_prj_risk AS mainTbl
            INNER JOIN m_prj_member ON (mainTbl.assignUser=m_prj_member.username AND m_prj_member.status='Active')
            LEFT OUTER JOIN s_user ON (m_prj_member.username=s_user.username)
          #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
              <include refid="queryRiskSearchCriteria"/>
            #end
          #end)) AS tmpTbl
        GROUP BY tmpTbl.assignUser, tmpTbl.fullname, tmpTbl.avatarId
    </select>

    <select id="getPrioritySummary" parameterType="com.mycollab.module.project.domain.criteria.ProjectTicketSearchCriteria"
            resultMap="com.mycollab.common.dao.GroupItemMapper.BaseResultMap" lang="velocity">
        SELECT tmpTbl.priority AS groupid, COUNT(tmpTbl.priority) AS value, '' AS groupname
        FROM
        ((SELECT mainTbl.priority, mainTbl.id AS typeId, 'Project-Task' AS type
          FROM m_prj_task AS mainTbl
          #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
              <include refid="queryTaskSearchCriteria"/>
            #end
          #end)
        UNION
        (SELECT mainTbl.priority, mainTbl.id AS typeId, 'Project-Bug' AS type
          FROM m_tracker_bug AS mainTbl
          #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
              <include refid="queryBugSearchCriteria"/>
            #end
          #end)
        UNION
        (SELECT mainTbl.priority, mainTbl.id AS typeId, 'Project-Risk' AS type
          FROM m_prj_risk AS mainTbl
          #ifnotnull($_parameter.searchCriteria)
            #trimext("WHERE" "AND|OR")
              <include refid="queryRiskSearchCriteria"/>
            #end
          #end)) AS tmpTbl
        GROUP BY tmpTbl.priority
    </select>
</mapper>